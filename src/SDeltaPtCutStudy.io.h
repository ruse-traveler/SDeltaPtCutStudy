// ----------------------------------------------------------------------------
// 'SDeltaPtCutStudy.io.h'
// Derek Anderson
// 07.06.2023
//
// Reads in the 'ntp_track' Ntuple
// generated by the SVtxEvaluator
// class and studies how deltapt/pt
// varies with quality cuts.
// ----------------------------------------------------------------------------

#pragma once

using namespace std;



// public io methods ----------------------------------------------------------

void SDeltaPtCutStudy::SetInputOutputFiles(const TString sInput, const TString sOutput) {

  sInFile  = sInput;
  sOutFile = sOutput;
  cout << "    Set input/output files:\n"
       << "      input  = " << sInFile.Data() << "\n"
       << "      output = " << sOutFile.Data()
       << endl;
  return;

}  // end 'SetInputOutputFiles(TString, TString)'



void SDeltaPtCutStudy::SetInputTuples(const TString sTrack, const TString sTruth) {

  sInTrack = sTrack;
  sInTruth = sTruth;
  cout << "    Set track/truth tuples:\n"
       << "      track tuple = " << sInTrack.Data() << "\n"
       << "      truth tuple = " << sInTruth.Data()
       << endl;
  return;

}  // end 'SetInputTuples(TString, TString)'



// private io methods ---------------------------------------------------------

void SDeltaPtCutStudy::OpenFiles() {

  fOutput = new TFile(sOutFile.Data(), "recreate");
  fInput  = new TFile(sInFile.Data(),  "read");
  if (!fInput || !fOutput) {
    cerr << "PANIC: couldn't open a file!\n"
         << "       fInput  = " << fInput  << "\n"
         << "       fOutput = " << fOutput << "\n"
         << endl;
    assert(fOutput && fInput);
  }

  cout << "      Opened files." << endl;
  return;

}  // end 'OpenFiles()'



void SDeltaPtCutStudy::GetTuples() {

  ntTrack = (TNtuple*) fInput -> Get(SInTrack.Data());
  ntTruth = (TNtuple*) fInput -> Get(SInTruth.Data());
  if (!ntTrack || !ntTruth) {
    cerr << "PANIC: couldn't grab aninput tuple!\n"
         << "       ntTrack = " << ntTrack << "\n"
         << "       ntTruth = " << ntTruth << "\n"
         << endl;
    assert(ntTrack && ntTruth);
  }

  cout << "      Grabbed input tuples." << endl;
  return;

}  // 'GetTuples()'



void SDeltaPtCutStudy::SaveOutput() {

  // make directories
  TDirectory *dNoCut    = (TDirectory*) fOutput -> mkdir("NoCuts");
  TDirectory *dFlatCut  = (TDirectory*) fOutput -> mkdir("FlatCuts");
  TDirectory *dSigmaCut = (TDirectory*) fOutput -> mkdir("SigmaCuts");
  TDirectory *dProject  = (TDirectory*) fOutput -> mkdir("Projections");
  cout << "      Made output directories." << endl;

  // save histograms
  fOutput         -> cd();
  dNoCut          -> cd();
  hEff            -> Write();
  hPtTruth        -> Write();
  hPtDelta        -> Write();
  hPtTrack        -> Write();
  hPtFrac         -> Write();
  hPtTrkTru       -> Write();
  hPtDeltaVsFrac  -> Write();
  hPtDeltaVsTrue  -> Write();
  hPtDeltaVsTrack -> Write();
  hPtTrueVsTrack  -> Write();

  // save flat delta-pt cut histograms
  dFlatCut -> cd();
  grRejCut -> Write();
  for (Ssiz_t iCut = 0; iCut < NDPtCuts; iCut++) {
    hEffCut[iCut]            -> Write();
    hPtDeltaCut[iCut]        -> Write();
    hPtTrackCut[iCut]        -> Write();
    hPtFracCut[iCut]         -> Write();
    hPtTrkTruCut[iCut]       -> Write();
    hPtDeltaVsFracCut[iCut]  -> Write();
    hPtDeltaVsTrueCut[iCut]  -> Write();
    hPtDeltaVsTrackCut[iCut] -> Write();
    hPtTrueVsTrackCut[iCut]  -> Write();
  }

  // save pt-dependent delta-pt cut histograms
  dSigmaCut -> cd();
  grRejSig  -> Write();
  for (Ssiz_t iSig = 0; iSig < NSigCuts; iSig++) {
    hEffSig[iSig]            -> Write();
    hPtDeltaSig[iSig]        -> Write();
    hPtTrackSig[iSig]        -> Write();
    hPtFracSig[iSig]         -> Write();
    hPtTrkTruSig[iSig]       -> Write();
    hPtDeltaVsFracSig[iSig]  -> Write();
    hPtDeltaVsTrueSig[iSig]  -> Write();
    hPtDeltaVsTrackSig[iSig] -> Write();
    hPtTrueVsTrackSig[iSig]  -> Write();
  }

  // save delta-pt projection histograms
  dProject  -> cd();
  grMuProj  -> Write();
  grSigProj -> Write();
  for (Ssiz_t iProj = 0; iProj < NProj; iProj++) {
    hPtDeltaProj[iProj] -> Write();
    fPtDeltaProj[iProj] -> Write();
  }
  for (Ssiz_t iSig = 0; iSig < NSigCuts; iSig++) {
    fMuHiProj[iSig]  -> Write();
    fMuLoProj[iSig]  -> Write();
    grMuHiProj[iSig] -> Write();
    grMuLoProj[iSig] -> Write();
  }

  cout << "      Saved output." << endl;
  return;

}  // end 'SaveOutput()'



void SDeltaPtCutStudy::CloseFiles() {

  fOutput -> cd();
  fOutput -> Close();
  fInput  -> cd();
  fInput  -> Close();

  cout << "      Closed files." << endl;
  return;

}  // end 'CloseFiles()'

// end ------------------------------------------------------------------------
